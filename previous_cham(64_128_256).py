# -*- coding: utf-8 -*-
"""previous_CHAM(64/128/256).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dyhQAEsKDgL62GRKbDxUlrSHXIX0Hu-X
"""
# 이거 구버전임 신버전은 round 수 다름

def ROR(W, i):
  return (((W)>>(i)) | ((W)<<(16-(i)))) & 0xffff

def ROL(W, i):
  return (((W)<<(i)) | ((W)>>(16-(i)))) & 0xffff

def ROR32(W,i):
  return (((W)>>(i)) | ((W)<<(32-(i)))) & 0xffffffff

def ROL32(W,i): 
  return (((W)<<(i)) | ((W)>>(32-(i)))) & 0xffffffff

# secret Key : 0x0100 0x0302 0x0504 0x0706 0x0908 0x0b0a 0x0d0c 0x0f0e
# plaintext : 0x1100 0x3322 0x5544 0x7766
# ciphertext : 0x453c 0x63bc 0xdcfa 0xbf4e

secretkey64 = [0x0100, 0x0302, 0x0504, 0x0706, 0x0908, 0x0b0a, 0x0d0c, 0x0f0e]
plaintext64 = [0x1100, 0x3322, 0x5544, 0x7766]
roundkey64= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

def KeyGen64(RK,K):
  for i in range(8):
    tmp0 = ROL(K[i],1)
    tmp1 = ROL(K[i],8)
    tmp2 = ROL(K[i],11)
    
    RK[i] = (tmp0 ^ tmp1 ^ K[i]) & 0xffff
    RK[((i+8)^1)] = (tmp0 ^ tmp2 ^ K[i]) & 0xffff

def Enc64(X, RK):
	X3 = X[3]
	X2 = X[2]
	X1 = X[1]
	X0 = X[0]

	for i in range(40):
		tmp0 = ROL(X1,1)
		tmp1 = (tmp0 ^ RK[2*i % 16]) & 0xffff
		tmp2 = (X0^(2*i)) & 0xffff
		tmp3 = (tmp1 + tmp2) & 0xffff
		tmp4 = ROL(tmp3,8)

		X0   = X1
		X1   = X2
		X2   = X3
		X3   = tmp4

		tmp0 = ROL(X1,8)
		tmp1 = (tmp0 ^ RK[(2*i + 1)% 16]) & 0xffff
		tmp2 = (X0^(2*i+1)) & 0xffff
		tmp3 = (tmp1 + tmp2) & 0xffff
		tmp4 = ROL(tmp3,1)

		X0   = X1
		X1   = X2
		X2   = X3
		X3   = tmp4

	X[3] = X3
	X[2] = X2
	X[1] = X1
	X[0] = X0

KeyGen64(roundkey64,secretkey64)

Enc64(plaintext64,roundkey64)

for i in range(4):
  plaintext64[i] = hex(plaintext64[i])

plaintext64

secretkey128 = [0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c]
plaintext128 = [0x33221100, 0x77665544, 0xbbaa9988, 0xffeeddcc]
roundkey128 = [0,0,0,0,0,0,0,0]

def KeyGen128(RK, K):
  for i in range(4):
    tmp0 = ROL32(K[i],1)
    tmp1 = ROL32(K[i],8)
    tmp2 = ROL32(K[i],11)
    
    RK[i] = (tmp0 ^ tmp1 ^ K[i]) & 0xffffffff
    RK[((i+4)^1)] = (tmp0 ^ tmp2 ^ K[i]) & 0xffffffff

def Enc128(X, RK):
  X3 = X[3]
  X2 = X[2]
  X1 = X[1]
  X0 = X[0]
  
  for i in range(40):
    tmp0 = ROL32(X1,1)
    tmp1 = (tmp0 ^ RK[2*i % 8]) & 0xffffffff
    tmp2 = (X0^(2*i)) & 0xffffffff
    tmp3 = (tmp1 + tmp2) & 0xffffffff
    tmp4 = ROL32(tmp3,8)

    X0   = X1
    X1   = X2
    X2   = X3
    X3   = tmp4
    
    tmp0 = ROL32(X1,8)
    tmp1 = (tmp0 ^ RK[(2*i + 1)% 8]) & 0xffffffff
    tmp2 = (X0^(2*i+1)) & 0xffffffff
    tmp3 = (tmp1 + tmp2) & 0xffffffff
    tmp4 = ROL32(tmp3,1)

    X0   = X1
    X1   = X2
    X2   = X3
    X3   = tmp4
  
  X[3] = X3
  X[2] = X2
  X[1] = X1
  X[0] = X0

KeyGen128(roundkey128,secretkey128)

#for i in range(8):
#  roundkey128[i] = hex(roundkey128[i])

#roundkey128

Enc128(plaintext128,roundkey128)

for i in range(4):
  plaintext128[i] = hex(plaintext128[i])

plaintext128

secretkey256 = [0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c, 0xf3f2f1f0, 0xf7f6f5f4, 0xfbfaf9f8, 0xfffefdfc]
plaintext256 = [0x33221100, 0x77665544, 0xbbaa9988, 0xffeeddcc]
roundkey256 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

def KeyGen256(RK, K):
  for i in range(8):
    tmp0 = ROL32(K[i],1)
    tmp1 = ROL32(K[i],8)
    tmp2 = ROL32(K[i],11)
    
    RK[i] = (tmp0 ^ tmp1 ^ K[i]) & 0xffffffff
    RK[((i+8)^1)] = (tmp0 ^ tmp2 ^ K[i]) & 0xffffffff

def Enc256(X, RK):
  X3 = X[3]
  X2 = X[2]
  X1 = X[1]
  X0 = X[0]

  for i in range(48):
    tmp0 = ROL32(X1,1)
    tmp1 = (tmp0 ^ RK[2*i % 16]) & 0xffffffff
    tmp2 = (X0^(2*i)) & 0xffffffff
    tmp3 = (tmp1 + tmp2) & 0xffffffff
    tmp4 = ROL32(tmp3,8)
    
    X0   = X1
    X1   = X2
    X2   = X3
    X3   = tmp4
    
    tmp0 = ROL32(X1,8)
    tmp1 = (tmp0 ^ RK[(2*i + 1)% 16]) & 0xffffffff
    tmp2 = (X0^(2*i+1)) & 0xffffffff
    tmp3 = (tmp1 + tmp2) & 0xffffffff
    tmp4 = ROL32(tmp3,1)
    
    X0   = X1
    X1   = X2
    X2   = X3
    X3   = tmp4
    
  X[3] = X3
  X[2] = X2
  X[1] = X1
  X[0] = X0

KeyGen256(roundkey256,secretkey256)

Enc256(plaintext256,roundkey256)

for i in range(4):
  plaintext256[i] = hex(plaintext256[i])

plaintext256
